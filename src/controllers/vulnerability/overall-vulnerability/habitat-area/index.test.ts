import { MultiPolygon, Polygon, polygon } from "@turf/helpers";
import {
  HabitatAreaOverallVulnerabilityControllerRequest,
  HabitatAreaOverallVulnerabilityControllerResponse,
} from "./types";
import testMigrationsJson from "@rrrcn/common/src/test-configs/vulnerabilities/test-migrations.json";
import testAreaJson from "@rrrcn/common/src/test-configs/vulnerabilities/test-area.json";
import { Feature } from "@turf/turf";
import { MigrationPath } from "../../../migrations/types";
import { habitatAreaOverallVulnerabilityController } from "./index";
import { getAreaMigrationsDensity } from "../../../../services/spatial-services/track-density/get-area-migrations-density";
const testArea = testAreaJson as unknown as Feature<Polygon | MultiPolygon>;
const testMigrations = [testMigrationsJson] as unknown as MigrationPath[];
export const config: HabitatAreaOverallVulnerabilityControllerRequest = {
  birds_count: 1000,
  migrations: testMigrations,
  area: testArea,
  updownProportion: 0.5,
  yinc: 0.05,
  xinc: 0.05,

  windfarmInstanceConfig: {
    offset: 0,
    timeOfWorkPerMonth: [
      0.75, 0.8, 0.83, 0.76, 0.7, 0.67, 0.69, 0.7, 0.8, 0.83, 0.8, 0.78,
    ],
    hubheight: 90,
  },
  windfarmConfig: {
    pitch: 15,
    radius: 60.5,
    numberOfTurbines: 40,
    omega: 5,
    chord: 4.21,
    blades: 3,
    bladeForm: [
      [0.05, 0.73],
      [0.1, 0.79],
      [0.15, 0.88],
      [0.2, 0.96],
      [0.25, 1.0],
      [0.3, 0.98],
      [0.35, 0.92],
      [0.4, 0.85],
      [0.45, 0.8],
      [0.5, 0.75],
      [0.55, 0.7],
      [0.6, 0.64],
      [0.65, 0.58],
      [0.7, 0.52],
      [0.75, 0.47],
      [0.8, 0.41],
      [0.85, 0.37],
      [0.9, 0.3],
      [0.95, 0.24],
      [1, 0.0],
    ],
  },
  birdConfig: {
    nocturnalActivity: 0,
    speed: 5.06,
    flight_type: "gliding",
    length: 0.78,
    wingspan: 2.05,
  },
  outputs: "./test/habitat-area",

  percentAtRotorHeight: 0.18,
};
let result: HabitatAreaOverallVulnerabilityControllerResponse;
beforeAll(async () => {
  result = await habitatAreaOverallVulnerabilityController(config);
});
describe("Habitat area vulnerability calculation", () => {
  test("Result defined", () => {
    expect(result).toBeDefined();
  });
  test("Basic model totals less than birds count", () => {
    if (result.allSingle) {
      Object.values(
        result.allSingle!.collisionsAssumingAvoidanceTotals
      ).forEach((value) =>
        expect(value).toBeLessThanOrEqual(config.birds_count)
      );
    }
  });
  test("Extended model totals less than birds count", () => {
    if (result.allExtended) {
      Object.values(
        result.allExtended!.collisionsAssumingAvoidanceTotals || {}
      ).forEach((value) =>
        expect(value).toBeLessThanOrEqual(config.birds_count)
      );
    }
  });
});
