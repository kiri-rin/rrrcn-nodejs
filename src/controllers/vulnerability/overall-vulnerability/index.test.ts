import { polygon } from "@turf/helpers";
import {
  areaVulnerabilityController,
  AreaVulnerabilityControllerRequest,
  AreaVulnerabilityControllerResponse,
} from "./index";

const config: AreaVulnerabilityControllerRequest = {
  updownProportion: 0.5,
  yinc: 0.05,
  xinc: 0.05,

  windfarmInstanceConfig: {
    offset: 0,
    timeOfWorkPerMonth: [
      0.75, 0.8, 0.83, 0.76, 0.7, 0.67, 0.69, 0.7, 0.8, 0.83, 0.8, 0.78,
    ],
    hubheight: 90,
  },
  windfarmConfig: {
    pitch: 15,
    radius: 60.5,
    numberOfTurbines: 40,
    omega: 5,
    chord: 4.21,
    blades: 3,
    bladeForm: [
      [0.05, 0.73],
      [0.1, 0.79],
      [0.15, 0.88],
      [0.2, 0.96],
      [0.25, 1.0],
      [0.3, 0.98],
      [0.35, 0.92],
      [0.4, 0.85],
      [0.45, 0.8],
      [0.5, 0.75],
      [0.55, 0.7],
      [0.6, 0.64],
      [0.65, 0.58],
      [0.7, 0.52],
      [0.75, 0.47],
      [0.8, 0.41],
      [0.85, 0.37],
      [0.9, 0.3],
      [0.95, 0.24],
      [1, 0.0],
    ],
  },
  birdConfig: {
    nocturnalActivity: 0,
    speed: 5.06,
    flight_type: "gliding",
    length: 0.78,
    wingspan: 2.05,
  },
  outputs: "./test",

  percentAtRotorHeight: 0.18,
  flightheights: [
    [0, 0],
    [1, 0],
    [2, 0],
    [3, 0],
    [4, 0],
    [5, 0],
    [6, 0],
    [7, 0],
    [8, 0],
    [9, 0],
    [10, 0],
    [11, 0],
    [12, 0],
    [13, 0],
    [14, 0],
    [15, 0],
    [16, 0],
    [17, 0],
    [18, 0],
    [19, 0],
    [20, 0],
    [21, 0],
    [22, 0],
    [23, 0],
    [24, 0],
    [25, 0],
    [26, 0],
    [27, 0],
    [28, 0],
    [29, 0],
    [30, 0],
    [31, 0],
    [32, 0],
    [33, 0],
    [34, 0],
    [35, 0],
    [36, 0],
    [37, 0],
    [38, 0],
    [39, 0],
    [40, 0],
    [41, 0],
    [42, 0],
    [43, 0],
    [44, 0],
    [45, 0],
    [46, 0],
    [47, 0],
    [48, 0],
    [49, 0],
    [50, 0.0023],
    [51, 0],
    [52, 0.0023],
    [53, 0.0023],
    [54, 0.0023],
    [55, 0.0046],
    [56, 0],
    [57, 0],
    [58, 0],
    [59, 0],
    [60, 0.0046],
    [61, 0],
    [62, 0.0023],
    [63, 0],
    [64, 0],
    [65, 0.0023],
    [66, 0],
    [67, 0],
    [68, 0],
    [69, 0.0023],
    [70, 0.0023],
    [71, 0.0023],
    [72, 0.0023],
    [73, 0],
    [74, 0.0023],
    [75, 0],
    [76, 0],
    [77, 0],
    [78, 0],
    [79, 0],
    [80, 0.0046],
    [81, 0],
    [82, 0],
    [83, 0.0023],
    [84, 0.0023],
    [85, 0.0046],
    [86, 0],
    [87, 0.0023],
    [88, 0],
    [89, 0],
    [90, 0],
    [91, 0.0023],
    [92, 0],
    [93, 0],
    [94, 0.0023],
    [95, 0.0023],
    [96, 0],
    [97, 0.0023],
    [98, 0],
    [99, 0.0046],
    [100, 0.0092],
    [101, 0.0023],
    [102, 0.0023],
    [103, 0.0023],
    [104, 0],
    [105, 0.0069],
    [106, 0.0023],
    [107, 0.0069],
    [108, 0.0023],
    [109, 0.0023],
    [110, 0.0023],
    [111, 0],
    [112, 0.0023],
    [113, 0],
    [114, 0],
    [115, 0],
    [116, 0],
    [117, 0],
    [118, 0],
    [119, 0],
    [120, 0.0138],
    [121, 0],
    [122, 0],
    [123, 0],
    [124, 0],
    [125, 0.0069],
    [126, 0.0023],
    [127, 0.0023],
    [128, 0.0023],
    [129, 0],
    [130, 0.0069],
    [131, 0],
    [132, 0],
    [133, 0],
    [134, 0],
    [135, 0.0092],
    [136, 0],
    [137, 0],
    [138, 0],
    [139, 0],
    [140, 0.0023],
    [141, 0.0023],
    [142, 0.0023],
    [143, 0],
    [144, 0.0046],
    [145, 0],
    [146, 0],
    [147, 0],
    [148, 0],
    [149, 0.0046],
    [150, 0.0069],
    [151, 0],
    [152, 0.0023],
    [153, 0.0023],
    [154, 0],
    [155, 0.0115],
  ],
  area: polygon([
    [
      [43.5, 43.5],
      [43.5, 43.5],
      [43.5, 43.5],
      [43.5, 43.5],
    ],
  ]),
  birdDensitiesPerMonth: [
    0.01408, 0.04224, 0.13646, 0.07226, 0.01222, 0.00252, 0.00244, 0.00242,
    0.0041, 0.06124, 0.00546, 0.00112,
  ],
};

let areaResult: AreaVulnerabilityControllerResponse | undefined;
beforeAll(async () => {
  areaResult = await areaVulnerabilityController(config);
});
describe("Check vulnerability overall calculation", () => {
  test("Area result defined", () => expect(areaResult).toBeDefined());
  test("Flux integral correct", () =>
    expect(areaResult?.extended?.fluxIntegral).toBeCloseTo(0.1926, 2));
  test("Collision integral correct", () =>
    expect(areaResult?.extended?.collisionIntegral).toBeCloseTo(0.01643, 2));
  test("Proportion at rotor height correct", () =>
    expect(areaResult?.extended?.proportionAtRotorHeight).toBeCloseTo(
      0.1829,
      2
    ));
  test("Single flight model upwind correct", () =>
    expect(areaResult?.single?.upwindCollisionRisk.total).toBeCloseTo(0.11, 2));
  test("Single flight model downwind correct", () =>
    expect(areaResult?.single?.downwindCollisionRisk.total).toBeCloseTo(
      0.058,
      2
    ));
  test("Single flight model total correct", () =>
    expect(areaResult?.single?.total).toBeCloseTo(0.084, 2));

  test("Extended model collision assuming avoidance 0.96 total correct", () =>
    expect(
      areaResult?.allExtended?.collisionsAssumingAvoidanceTotals[0.96]
    ).toBeCloseTo(5, -0.2));
  test("Extended model collision assuming avoidance 0.98 total correct", () =>
    expect(
      areaResult?.allExtended?.collisionsAssumingAvoidanceTotals[0.98]
    ).toBeCloseTo(2, -0.2));
  test("Extended model collision assuming avoidance 0.99 total correct", () =>
    expect(
      areaResult?.allExtended?.collisionsAssumingAvoidanceTotals[0.99]
    ).toBeCloseTo(1, -0.2));
  test("Extended model collision assuming avoidance 0.995 total correct", () =>
    expect(
      areaResult?.allExtended?.collisionsAssumingAvoidanceTotals[0.995]
    ).toBeCloseTo(1, -0.2));
  test("Extended model potential collisions total correct", () =>
    expect(areaResult?.allExtended?.potentialCollisionsTotal).toBeCloseTo(
      117,
      -0.2
    ));
  test("Extended model potential transits total correct", () =>
    expect(areaResult?.allExtended?.potentialTransitsTotal).toBeCloseTo(
      1723,
      -1
    ));

  test("Basic model collision assuming avoidance 0.96 total correct", () =>
    expect(
      areaResult?.allSingle?.collisionsAssumingAvoidanceTotals[0.96]
    ).toBeCloseTo(5, -0.2));
  test("Basic model collision assuming avoidance 0.98 total correct", () =>
    expect(
      areaResult?.allSingle?.collisionsAssumingAvoidanceTotals[0.98]
    ).toBeCloseTo(2, -0.2));
  test("Basic model collision assuming avoidance 0.99 total correct", () =>
    expect(
      areaResult?.allSingle?.collisionsAssumingAvoidanceTotals[0.99]
    ).toBeCloseTo(1, -0.2));
  test("Basic model collision assuming avoidance 0.995 total correct", () =>
    expect(
      areaResult?.allSingle?.collisionsAssumingAvoidanceTotals[0.995]
    ).toBeCloseTo(1, -0.2));
  test("Basic model potential collisions total correct", () =>
    expect(areaResult?.allSingle?.potentialCollisionsTotal).toBeCloseTo(
      108,
      -0.2
    ));
  test("Basic model potential collisions total correct", () =>
    expect(areaResult?.allSingle?.potentialTransitsTotal).toBeCloseTo(
      1610,
      -1
    ));
});
