import {
  MultipleAreaVulnerabilityControllerResponse,
  MultipleAreaVulnerabilityRequest,
} from "./multiple-area/multiple-area-vulnerability";
import path from "path";
import { flightHeightTransitRisk } from "../flight-height-transit-risk";
import { singleTransitCollisionRiskController } from "../single-transit-risk";
import { getLightDayLengthPerMonth } from "../../../utils/light-day";
import { center } from "@turf/turf";
import { vulnerabilityCommonModelService } from "../../../services/vulnerability";
import { writeOverallVulnerabilityCsv } from "./utils/csv";

export type AreaVulnerabilityControllerRequest = Omit<
  MultipleAreaVulnerabilityRequest,
  "areas"
> &
  Omit<MultipleAreaVulnerabilityRequest["areas"][number], "id">;
export type AreaVulnerabilityControllerResponse =
  MultipleAreaVulnerabilityControllerResponse[string];
const avoidanceRates: number[] = [];

export const areaVulnerabilityController = async (
  request: AreaVulnerabilityControllerRequest
) => {
  let result: AreaVulnerabilityControllerResponse;
  const {
    area,
    birdDensitiesPerMonth,
    flightheights,
    percentAtRotorHeight,
    updownProportion,
    xinc,
    yinc,
    windfarmInstanceConfig,
    birdConfig,
    windfarmConfig,
    outputs,
  } = request;
  const areaPath = outputs;
  const extended =
    (flightheights.length > 1 &&
      (await flightHeightTransitRisk({
        birdConfig,
        outputs: areaPath,
        updownProportion,
        windfarmConfig,
        windfarmInstanceConfig,
        xinc,
        yinc,
        flightheights,
      }))) ||
    undefined;
  const single = await singleTransitCollisionRiskController({
    birdConfig,
    outputs: areaPath,
    updownProportion,
    windfarmConfig,
    windfarmInstanceConfig,
    xinc,
    yinc,
    area,
  });
  result = { extended, single, area };
  const { dayHoursPerMonth, nightHoursPerMonth } = getLightDayLengthPerMonth(
    center(area.geometry).geometry
  ).reduce(
    (acc, { nightHours, dayHours }) => {
      acc.dayHoursPerMonth.push(dayHours);
      acc.nightHoursPerMonth.push(nightHours);
      return acc;
    },
    {
      dayHoursPerMonth: [] as number[],
      nightHoursPerMonth: [] as number[],
    }
  );
  if (birdDensitiesPerMonth) {
    const allSingle =
      (single &&
        percentAtRotorHeight &&
        vulnerabilityCommonModelService({
          collisionRisk: single.total * percentAtRotorHeight,
          fluxRate: percentAtRotorHeight,
          avoidanceRates,
          birdConfig,
          birdDensitiesPerMonth,
          dayHoursPerMonth,
          nightHoursPerMonth,
          updownProportion,
          windfarmConfig,
          windfarmInstanceConfig,
          xinc,
          yinc,
        })) ||
      undefined;

    const allExtended =
      (extended &&
        vulnerabilityCommonModelService({
          collisionRisk: extended.collisionIntegral,
          fluxRate: extended.fluxIntegral,
          avoidanceRates,
          birdConfig,
          birdDensitiesPerMonth,
          dayHoursPerMonth,
          nightHoursPerMonth,
          updownProportion,
          windfarmConfig,
          windfarmInstanceConfig,
          xinc,
          yinc,
        })) ||
      undefined;
    (allExtended || allSingle) &&
      (await writeOverallVulnerabilityCsv(
        {
          birdDensitiesPerMonth,
          timeOfWorkPerMonth: windfarmInstanceConfig.timeOfWorkPerMonth,
          single,
          proportionAtRotorHeight: percentAtRotorHeight,
          extended,
          allExtended: allExtended,
          allSingle: allSingle!,
        },
        `${areaPath}`
      ));
    result.allExtended = allExtended;
    result.allSingle = allSingle;
  }
  return result;
};
