import {
  BirdCollisionConfigType,
  WindfarmCollisionConfigType,
  WindfarmInstanceConfigType,
} from "../../services/vulnerability/types";
import { CommonConfig } from "@rrrcn/common-types/services/api/common-body";
import { flightHeightTransitRisk } from "./flight-height-transit-risk";
import type { FlightHeightTransitRiskResponse } from "./flight-height-transit-risk";
import { Feature, Polygon,MultiPolygon } from "@turf/helpers";
import * as path from "path";
import { SingleTransitCollisionRiskControllerResult } from "../../single-transit-risk";
import { VulnerabilityCommonModelServiceResult } from "../../../../services/vulnerability";
import { areaVulnerabilityController } from "../index";

export interface MultipleAreaVulnerabilityRequest extends CommonConfig {
  areas: {
    id: number | string;
    area: GeoJSON.Feature<Polygon | MultiPolygon>;
    flightheights: [number, number][];
    percentAtRotorHeight?: number;
    birdDensitiesPerMonth?: number[];
  }[];
  updownProportion: number;
  windfarmConfig: WindfarmCollisionConfigType;
  birdConfig: BirdCollisionConfigType;
  windfarmInstanceConfig: WindfarmInstanceConfigType;
  xinc: number;
  yinc: number;
}
const avoidanceRates: number[] = [];
export type MultipleAreaVulnerabilityControllerResponse = {
  [areaId: string]: {
    area: Feature<Polygon | MultiPolygon, any>;
    extended?: FlightHeightTransitRiskResponse;
    allExtended?: VulnerabilityCommonModelServiceResult;
    allSingle?: VulnerabilityCommonModelServiceResult;
    single?: SingleTransitCollisionRiskControllerResult;
  };
};

export const multipleAreaVulnerabilityController = async ({
  areas,
  birdConfig,
  outputs,
  updownProportion,
  windfarmConfig,
  windfarmInstanceConfig,
  xinc,
  yinc,
}: MultipleAreaVulnerabilityRequest): Promise<
  MultipleAreaVulnerabilityControllerResponse | undefined
> => {
  if (!outputs) return;
  let result: { [p: string]: FlightHeightTransitRiskResponse | any } = {};
  for (let {
    area,
    flightheights,
    percentAtRotorHeight,
    birdDensitiesPerMonth,
    id,
  } of areas) {
    const areaPath = path.join(outputs, String(id));
    result[id] = await areaVulnerabilityController({
      percentAtRotorHeight,
      flightheights,
      birdDensitiesPerMonth,
      area,
      outputs: areaPath,
      birdConfig,
      updownProportion,
      windfarmConfig,
      windfarmInstanceConfig,
      xinc,
      yinc,
    });
  }
  return result;
};
