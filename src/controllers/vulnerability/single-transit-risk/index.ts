import { CommonConfig } from "@rrrcn/common-types/services/api/common-body";
import {
  BirdCollisionConfigType,
  WindfarmCollisionConfigType,
  WindfarmInstanceConfigType,
} from "../../../services/vulnerability/types";
import { center } from "@turf/turf";
import { getLightDayLengthPerMonth } from "../../../utils/light-day";
import {
  singleTransitCollisionRisk,
  SingleTransitCollisionRiskResult,
} from "../../../services/vulnerability/single-transit";
import { interpolate } from "../../../services/vulnerability/base_functions";
import { mkdirSync, writeFileSync } from "fs";
import { stringify } from "csv-stringify/sync";
import path from "path";
export interface SingleTransitionCollisionConfig extends CommonConfig {
  area: GeoJSON.Feature<GeoJSON.Polygon>;
  // birdDensitiesPerMonth: number[];
  updownProportion: number;
  windfarmConfig: WindfarmCollisionConfigType;
  birdConfig: BirdCollisionConfigType;
  windfarmInstanceConfig: WindfarmInstanceConfigType;
  xinc: number;
  yinc: number;
  // avoidanceRates: number[];
}
export type SingleTransitCollisionRiskControllerResult = {
  upwindCollisionRisk: SingleTransitCollisionRiskResult;
  downwindCollisionRisk: SingleTransitCollisionRiskResult;
  total: number;
};
export const singleTransitCollisionRiskController = ({
  area,
  birdConfig,
  updownProportion,
  windfarmConfig,
  windfarmInstanceConfig,
  xinc,
  yinc,
  outputs,
}: SingleTransitionCollisionConfig): SingleTransitCollisionRiskControllerResult => {
  const { nightHoursPerMonth, dayHoursPerMonth } = getLightDayLengthPerMonth(
    center(area).geometry
  ).reduce(
    (acc, it) => {
      acc.dayHoursPerMonth.push(it.dayHours);
      acc.nightHoursPerMonth.push(it.nightHours);
      return acc;
    },
    { nightHoursPerMonth: [] as number[], dayHoursPerMonth: [] as number[] }
  );
  const upwindCollisionRisk = singleTransitCollisionRisk({
    windfarmConfig,
    updown: "up",
    xinc,
    birdConfig,
    windfarmInstanceConfig,
    yinc,
  });
  const { results: resultsUp, total: totalUp } = upwindCollisionRisk;
  const downwindCollisionRisk = singleTransitCollisionRisk({
    windfarmConfig,
    updown: "down",
    xinc,
    birdConfig,
    windfarmInstanceConfig,
    yinc,
  });
  const { results: resultsDown, total: totalDown } = downwindCollisionRisk;

  const total = totalUp * updownProportion + totalDown * (1 - updownProportion);

  const csvData = [
    ["", "", "", "upwind", "", "", "downwind", ""],
    [
      "radius",
      "chord",
      "alpha",
      "collength",
      "p(collision}",
      "",
      "collength",
      "p(collision)",
    ],
  ];
  resultsUp.forEach(
    (
      { pcollision: pcollisionUp, colllength: colllengthUp, alpha: alphaUp },
      index
    ) => {
      const {
        pcollision: pcollisionDown,
        colllength: colllengthDown,
        alpha: alphaDown,
      } = resultsDown[index];
      csvData.push([
        String(index * xinc),
        String(interpolate(windfarmConfig.bladeForm, index * xinc)),
        String(alphaUp),
        String(colllengthUp),
        String(pcollisionUp),
        "",
        String(alphaDown),
        String(colllengthDown),
        String(pcollisionDown),
      ]);
    }
  );
  csvData.push(...new Array(2).fill(["", "", "", "", "", "", "", ""]));
  csvData.push(["Overall collision risk", "", "", "", "", "", "", ""]);
  csvData.push(["upwind", "downwind", "", "", "", "", "", ""]);
  csvData.push([
    100 * updownProportion + "%",
    100 * (1 - updownProportion) + "%",
    "",
    "",
    "",
    "",
    "",
    "",
  ]);
  csvData.push([
    "",
    "",
    "",
    "Upwind",
    String(totalUp),
    "",
    "Downwind",
    String(totalDown),
  ]);
  csvData.push(["", "", "", "", "Average", String(total), "", ""]);
  mkdirSync(outputs!, { recursive: true });
  writeFileSync(path.join(outputs!, "single.csv"), stringify(csvData));
  return { upwindCollisionRisk, downwindCollisionRisk, total };
};
